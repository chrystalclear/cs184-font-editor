#include "bvh.h"

#include "CGL/CGL.h"
#include "static_scene/triangle.h"

#include <iostream>
#include <stack>

using namespace std;

namespace CGL { namespace StaticScene {

BVHAccel::BVHAccel(const std::vector<Primitive *> &_primitives,
                   size_t max_leaf_size) {

  root = construct_bvh(_primitives, max_leaf_size);

}

BVHAccel::~BVHAccel() {
  if (root) delete root;
}

BBox BVHAccel::get_bbox() const {
  return root->bb;
}

void BVHAccel::draw(BVHNode *node, const Color& c) const {
  if (node->isLeaf()) {
    for (Primitive *p : *(node->prims))
      p->draw(c);
  } else {
    draw(node->l, c);
    draw(node->r, c);
  }
}

void BVHAccel::drawOutline(BVHNode *node, const Color& c) const {
  if (node->isLeaf()) {
    for (Primitive *p : *(node->prims))
      p->drawOutline(c);
  } else {
    drawOutline(node->l, c);
    drawOutline(node->r, c);
  }
}

BVHNode *BVHAccel::construct_bvh(const std::vector<Primitive*>& prims, size_t max_leaf_size) {
  
  // TODO Part 2, task 1:
  // Construct a BVH from the given vector of primitives and maximum leaf
  // size configuration. The starter code build a BVH aggregate with a
  // single leaf node (which is also the root) that encloses all the
  // primitives.


  BBox centroid_box, bbox;

  for (Primitive *p : prims) {
    BBox bb = p->get_bbox();
    bbox.expand(bb);
    Vector3D c = bb.centroid();
    centroid_box.expand(c);
  }
  
  // You'll want to adjust this code.
  // Right now we just return a single node containing all primitives.
  BVHNode *node = new BVHNode(bbox);
  if (prims.size() <= max_leaf_size){  
    node->prims = new vector<Primitive *>(prims);
  }
  else{
    int axis = -1;
    if (max(max(centroid_box.extent.x, centroid_box.extent.y), centroid_box.extent.z) == centroid_box.extent.x)
      {axis = 0;}
    else if (max(max(centroid_box.extent.x, centroid_box.extent.y), centroid_box.extent.z) == centroid_box.extent.y)
      {axis = 1;}
    else
      {axis = 2;}
      
    Vector3D splitpoint = centroid_box.centroid();
    std::vector<Primitive *> *lessPrims = new vector<Primitive *>(), *greaterPrims = new vector<Primitive *>();
    
    //fill prims
    for (Primitive *p : prims) {
      if (p->get_bbox().centroid()[axis] < splitpoint[axis])
        {lessPrims->push_back(p);}
      else
        {greaterPrims->push_back(p);}
    }
    
    //check edge case
    if (lessPrims->empty() or greaterPrims->empty()){ 
      std::cout<<"EMPTY\n";
      node->prims = new vector<Primitive *>(prims);
    }
    else{
    
      node->l = construct_bvh(*lessPrims, max_leaf_size);
      node->r = construct_bvh(*greaterPrims, max_leaf_size);
    }
  }
  return node;

}


bool BVHAccel::intersect(const Ray& ray, BVHNode *node) const {

  // TODO Part 2, task 3:
  // Implement BVH intersection.
  double t0 = ray.min_t, t1 = ray.max_t;
  if (!node->bb.intersect(ray, t0, t1))
    {return false;}
  if (node->isLeaf()){
    for (Primitive *p : *(node->prims)) {
      total_isects++;
      if (p->intersect(ray)){  
        return true;
      }
    }    
  }
  else{
    bool hit1 = intersect(ray, node->l);
    bool hit2 = intersect(ray, node->r);
    return hit1 or hit2;
  }
  return false;

}

bool BVHAccel::intersect(const Ray& ray, Intersection* i, BVHNode *node) const {

  // TODO Part 2, task 3:
  // Implement BVH intersection.
  // Currently, we just naively loop over every primitive.
  
  double t0 = ray.min_t, t1 = ray.max_t;
  bool hit = false;
  if (!node->bb.intersect(ray, t0, t1))
    {return false;}
  if (node->isLeaf()){
    for (Primitive *p : *(node->prims)) {
      total_isects++;
      if (p->intersect(ray, i)){  
        hit = true;
      }
    }
    return hit; 
  }
  else{
    bool hit1 = intersect(ray, i, node->l);
    bool hit2 = intersect(ray, i, node->r);
    return hit1 or hit2;
  }
  

}

}  // namespace StaticScene
}  // namespace CGL
